type Args = record { file_path : text };
type Args_1 = record {
  file_hash : text;
  file_path : text;
  file_size : nat64;
  chunk_size : opt nat64;
};
type Args_2 = record { chunk_id : nat; file_path : text; chunk_data : blob };
type FinalizeUploadResp = record { url : text };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : record {}; Err : record { RejectionCode; text } };
type Result_1 = variant {
  Ok : FinalizeUploadResp;
  Err : record { RejectionCode; text };
};
type Result_2 = variant {
  Ok : record {};
  Err : record { RejectionCode; text };
};
service : (null) -> {
  cancel_upload : (Args) -> (Result);
  finalize_upload : (Args) -> (Result_1);
  get_storage_size : (null) -> (nat) query;
  init_upload : (Args_1) -> (Result_2);
  store_chunk : (Args_2) -> (Result_2);
}
